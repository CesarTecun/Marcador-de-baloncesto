services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: marcador_db
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
    ports:
      - "1433:1433"
    volumes:
      - ./db:/db
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost,1433", "-C", "-U", "sa", "-P", "${SA_PASSWORD}", "-Q", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 30
    profiles: ["db", "all"]

  db_init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: marcador_db_init
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SA_PASSWORD=${SA_PASSWORD}
    volumes:
      - ./db:/db
      - ./scripts:/scripts
    entrypoint: ["/bin/bash","-c","/scripts/db-init.sh"]
    restart: "no"
    profiles: ["db", "all"]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: marcador_api
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - DB_CONNECTION_STRING=Server=db,1433;Database=${DB_NAME};User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;
    ports:
      - "8080:8080"
    profiles: ["api", "all"]

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: marcador_ui
    depends_on:
      api:
        condition: service_started   # espera a que el contenedor api est√© arrancado
    restart: unless-stopped          # si falla por DNS al principio, se reinicia solo
    ports:
      - "4200:80"
    profiles: ["ui", "all"]
